//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18444
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Nd.Framework.Configuration
{
    
    
    /// <summary>
    /// 表示Nd.Framework框架的配置节点
    /// </summary>
    public partial class NdFrameworkConfigSection : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the NdFrameworkConfigSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string NdFrameworkConfigSectionSectionName = "nd_framework";
        
        /// <summary>
        /// The XML path of the NdFrameworkConfigSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string NdFrameworkConfigSectionSectionPath = "nd_framework";
        
        /// <summary>
        /// Gets the NdFrameworkConfigSection instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public static global::Nd.Framework.Configuration.NdFrameworkConfigSection Instance
        {
            get
            {
                return ((global::Nd.Framework.Configuration.NdFrameworkConfigSection)(global::System.Configuration.ConfigurationManager.GetSection(global::Nd.Framework.Configuration.NdFrameworkConfigSection.NdFrameworkConfigSectionSectionPath)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Nd.Framework.Configuration.NdFrameworkConfigSection.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::Nd.Framework.Configuration.NdFrameworkConfigSection.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Logging Property
        /// <summary>
        /// The XML name of the <see cref="Logging"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string LoggingPropertyName = "logging";
        
        /// <summary>
        /// Gets or sets the Logging.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Logging.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Nd.Framework.Configuration.NdFrameworkConfigSection.LoggingPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Nd.Framework.Configuration.LoggingElement Logging
        {
            get
            {
                return ((global::Nd.Framework.Configuration.LoggingElement)(base[global::Nd.Framework.Configuration.NdFrameworkConfigSection.LoggingPropertyName]));
            }
            set
            {
                base[global::Nd.Framework.Configuration.NdFrameworkConfigSection.LoggingPropertyName] = value;
            }
        }
        #endregion
        
        #region Core Property
        /// <summary>
        /// The XML name of the <see cref="Core"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string CorePropertyName = "core";
        
        /// <summary>
        /// Gets or sets the Core.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Core.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Nd.Framework.Configuration.NdFrameworkConfigSection.CorePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Nd.Framework.Configuration.CoreElement Core
        {
            get
            {
                return ((global::Nd.Framework.Configuration.CoreElement)(base[global::Nd.Framework.Configuration.NdFrameworkConfigSection.CorePropertyName]));
            }
            set
            {
                base[global::Nd.Framework.Configuration.NdFrameworkConfigSection.CorePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Nd.Framework.Configuration
{
    
    
    /// <summary>
    /// The logging element
    /// </summary>
    public partial class LoggingElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Provider Property
        /// <summary>
        /// The XML name of the <see cref="Provider"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string ProviderPropertyName = "provider";
        
        /// <summary>
        /// Gets or sets the Provider.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Provider.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Nd.Framework.Configuration.LoggingElement.ProviderPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Provider
        {
            get
            {
                return ((string)(base[global::Nd.Framework.Configuration.LoggingElement.ProviderPropertyName]));
            }
            set
            {
                base[global::Nd.Framework.Configuration.LoggingElement.ProviderPropertyName] = value;
            }
        }
        #endregion
        
        #region ErrorLogger Property
        /// <summary>
        /// The XML name of the <see cref="ErrorLogger"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string ErrorLoggerPropertyName = "errorLogger";
        
        /// <summary>
        /// Gets or sets the ErrorLogger.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The ErrorLogger.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Nd.Framework.Configuration.LoggingElement.ErrorLoggerPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string ErrorLogger
        {
            get
            {
                return ((string)(base[global::Nd.Framework.Configuration.LoggingElement.ErrorLoggerPropertyName]));
            }
            set
            {
                base[global::Nd.Framework.Configuration.LoggingElement.ErrorLoggerPropertyName] = value;
            }
        }
        #endregion
        
        #region InfoLogger Property
        /// <summary>
        /// The XML name of the <see cref="InfoLogger"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string InfoLoggerPropertyName = "infoLogger";
        
        /// <summary>
        /// Gets or sets the InfoLogger.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The InfoLogger.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Nd.Framework.Configuration.LoggingElement.InfoLoggerPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string InfoLogger
        {
            get
            {
                return ((string)(base[global::Nd.Framework.Configuration.LoggingElement.InfoLoggerPropertyName]));
            }
            set
            {
                base[global::Nd.Framework.Configuration.LoggingElement.InfoLoggerPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Nd.Framework.Configuration
{
    
    
    /// <summary>
    /// The CoreElement Configuration Element.
    /// </summary>
    public partial class CoreElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Provider Property
        /// <summary>
        /// The XML name of the <see cref="Provider"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string ProviderPropertyName = "provider";
        
        /// <summary>
        /// Gets or sets the Provider.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Provider.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Nd.Framework.Configuration.CoreElement.ProviderPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Provider
        {
            get
            {
                return ((string)(base[global::Nd.Framework.Configuration.CoreElement.ProviderPropertyName]));
            }
            set
            {
                base[global::Nd.Framework.Configuration.CoreElement.ProviderPropertyName] = value;
            }
        }
        #endregion
        
        #region HasAOP Property
        /// <summary>
        /// The XML name of the <see cref="HasAOP"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string HasAOPPropertyName = "hasAOP";
        
        /// <summary>
        /// Gets or sets the HasAOP.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The HasAOP.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Nd.Framework.Configuration.CoreElement.HasAOPPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual bool HasAOP
        {
            get
            {
                return ((bool)(base[global::Nd.Framework.Configuration.CoreElement.HasAOPPropertyName]));
            }
            set
            {
                base[global::Nd.Framework.Configuration.CoreElement.HasAOPPropertyName] = value;
            }
        }
        #endregion
        
        #region DefaultLifeStyle Property
        /// <summary>
        /// The XML name of the <see cref="DefaultLifeStyle"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string DefaultLifeStylePropertyName = "defaultLifeStyle";
        
        /// <summary>
        /// Gets or sets the DefaultLifeStyle.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The DefaultLifeStyle.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Nd.Framework.Configuration.CoreElement.DefaultLifeStylePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string DefaultLifeStyle
        {
            get
            {
                return ((string)(base[global::Nd.Framework.Configuration.CoreElement.DefaultLifeStylePropertyName]));
            }
            set
            {
                base[global::Nd.Framework.Configuration.CoreElement.DefaultLifeStylePropertyName] = value;
            }
        }
        #endregion
    }
}
